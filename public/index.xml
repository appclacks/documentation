<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Appclacks on Appclacks documentation</title>
    <link>https://www.doc.appclacks.com/index.html</link>
    <description>Recent content in Appclacks on Appclacks documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://www.doc.appclacks.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting Started</title>
      <link>https://www.doc.appclacks.com/getting-started/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://www.doc.appclacks.com/getting-started/index.html</guid>
      <description>This guide explains how to use the Appclacks CLI to create your first health check on Appclacks.
Architecture Run the server In order to run Appclacks server, you need to deploy its server.
The Appclacks server requires a PostgreSQL database to run.
Configuration file The Appclacks server requires a configuration file to run:
--- # Configuration of the HTTP server http: # IP to listen to, mandatory host: 127.0.0.1 # Port to listen to, mandatory port: 9000 # Basic auth credentials for the server, optional basic-auth: username: &amp;#34;foo&amp;#34; password: &amp;#34;bar&amp;#34; # TLS key, optional key: &amp;#34;/path/to/key-file.</description>
    </item>
    <item>
      <title>Health checks</title>
      <link>https://www.doc.appclacks.com/healthcheck/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://www.doc.appclacks.com/healthcheck/index.html</guid>
      <description>This series of guides explain how to manage health checks using Appclacks. The reading of the Getting Started section is recommended before reading the guides.
Don&amp;rsquo;t hesitate to use the --help flag on commands to list all available options on the Appclacks CLI
You can also use the --output json flag on commands to get the JSON payload returned by the Appclacks API.</description>
    </item>
    <item>
      <title>Push gateway</title>
      <link>https://www.doc.appclacks.com/pushgateway/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://www.doc.appclacks.com/pushgateway/index.html</guid>
      <description>Appclacks server provides a Prometheus push gateway with additional features:
Full featured CRUD API Highly available setup: your push gateway is not a Single Point of Failure anymore TTL support on the metrics being pushed: you can for example configure a metric to expire after one minute, or one hour. Integrated into the Appclacks CLI </description>
    </item>
    <item>
      <title>Observability</title>
      <link>https://www.doc.appclacks.com/observability/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://www.doc.appclacks.com/observability/index.html</guid>
      <description>The Appclacks API exposes health checks metrics in the Prometheus format. + It also contains Prometheus queries examples (for alerting for example) as well as the JSON definition of a Grafana dashboard ready to be imported into your Grafana instance.
Appclacks exposes two metrics endpoints:
/metrics: metrics about the Appclacks server itself (Go routine, HTTP-related metrics&amp;hellip;) /pushgateway/metrics: metrics created using the Appclacks push gateway.* Basic authentication can be configured for these metrics endpoints using the configuration file, in tge http.</description>
    </item>
    <item>
      <title>Tooling</title>
      <link>https://www.doc.appclacks.com/tooling/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://www.doc.appclacks.com/tooling/index.html</guid>
      <description>Golang SDK A Golang client is available On Github.</description>
    </item>
  </channel>
</rss>